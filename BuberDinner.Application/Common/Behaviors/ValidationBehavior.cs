using BuberDinner.Application.Authentication.Commands.Register;
using BuberDinner.Application.Authentication.Common;

using ErrorOr;

using FluentValidation;

using MediatR;

namespace BuberDinner.Application.Common.Behaviors;
public class ValidationBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse> where TRequest : IRequest<TResponse> where TResponse : IErrorOr
{
  private readonly IValidator<TRequest>? _validator;

  public ValidationBehavior(IValidator<TRequest>? validator)
  {
    _validator = validator;
  }

  public async Task<TResponse> Handle(
    TRequest request,
    RequestHandlerDelegate<TResponse> next,
    CancellationToken cancellationToken)
  {
    if (_validator is null)
    {
      return await next();
    }
    var validationResult = await _validator.ValidateAsync(request, cancellationToken);
    if (!validationResult.IsValid)
    {
      var errors = validationResult.Errors.ConvertAll(x => Error.Validation(x.PropertyName, x.ErrorMessage));
      // Generated by Copilot 
      // return (TResponse)Activator.CreateInstance(typeof(ErrorOr<TResponse>), errors)!;
      return (dynamic)errors;
    }
    return await next();
  }
}